多线程：
    1.从软件或者硬件上实现多个线程并发执行的技术。
    2.一个应用程序可以同时执行多个任务，一般将一个任务定义为一个线程。

单处理器上的多线程：
    CPU会为每一个线程交替分配时间片，多个线程轮流执行，任务并非真正的同时执行，只是CPU快速切换线程，仿佛同时执行一样。
线程切换代价：CPU切换线程时，会耗费一定的时间，即所谓的上下文切换代价。

阻塞：
在单处理器上，若所有的线程都不会阻塞，那么将所有任务放在一个线程中执行与分开用多个线程执行时间是一样的(不考虑CPU线程切换时间)
然而在实际中，线程往往会有一些阻塞操作如IO操作，将导致任务/线程阻塞，若此时所有任务都存于单个线程，将都被阻塞无法执行，CPU将会闲置
所以，阻塞使得在单个处理器上多线程编程有意义。

可响应的用户界面：
多线程编程的另一个优点是能构建可响应的用户界面。将响应用户界面操作的任务封装进一个UI线程，其他费时/计算等操作封装到其他线程，
这些每个线程都会轮流执行，用户界面就可及时响应用户的输入

多处理器环境：
    多个处理器实现了真正的同时执行！
    同时执行前提：将任务拆分为子任务分别在多个CPU上执行，但子任务间没有先后执行的依赖关系，必须是并发的！！
并行与并发：
多处理器上的多线程编程，真正的同时执行，即并行！
单处理器上的多线程编程，通过CPU频繁切换线程，仿佛“同时”执行，但无法实现真正的同时执行，即并发！



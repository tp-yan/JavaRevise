以C语言为例，源代码到最终运行程序的过程：预处理、编译、汇编、链接、运行：
    源代码(.c .cpp)-->预处理(.i .ii)-->编译(.s)-->汇编(.o)-->链接(a.out，可执行文件)-->运行(载入内存)
预处理：
    1.将 #define删除，替换为对应的宏定义
    2.处理所有的条件预编译指令，如#if,#ifdef,#else等
    3.将所有的#include删除，并将include的内容插入到#include的位置（递归过程）
    4.删除注释等
    5.预处理后： .c-->.i .cpp-->.ii

编译：词法分析、语法分析、语义分析、中间语言生成、目标代码生成与优化
    编译生成的目标代码有三种形式
    1.可以立即执行的机器语言代码指令
    2.待装配的机器语言模块
    3.汇编语言代码(这里以此为例)
    词法分析：利用词法分析器将作为字符串的源程序改造为单词符号串的中间程序。
    语法分析：以单词符号作为输入生成原语法树，分析单词符号串是否符合形成符合语法规则的语法单位，最后看是否构成一个符合要求的程序。
              生成的语法树是以表达式为节点的树
    语义分析：语法分析只完成了表达式语法层面的分析，并不了解语句的真实意义。语义分析=静态语义+动态语义分析。
              静态语义：负责如类型匹配的工作
              动态语义：运行期间的语义相关问题。
              语义分析得到的语法树表达式被标识了类型。
    中间语言又称中间代码：使编译程序的结构在逻辑上更为简单，常见形式：逆波兰记号、四元式、三元式和树。
    编译最后一步：目标代码的生成与优化（依赖于目标机器而生成的目标代码有所差异，这里以生成汇编代码为例）

汇编：将汇编代码转换为机器指令，几乎一条汇编代码对应一条机器指令。针对每个源程序得到对应的 “.o” 文件。

链接：将各个源文件编译生成的目标程序(.o)整合拼装起来，形成最终可以直接运行的可执行文件。
      静态链接：即上述生成可执行文件的过程。
                主要工作是将函数和变量重定向。
                重定向：将指令中被调函数/变量事先搁置的目标地址，修改为真实的函数、变量地址（因为事先未知函数与变量的物理地址）
      动态链接：不再对目标文件进行链接，而是在程序运行时才进行链接，整个链接的过程被延迟到运行时。优点：节省内存空间，便于维护更新

运行：程序的运行则是将可执行文件装载到内存中并由CPU顺序执行该程序机器指令的动态过程。
可执行文件中依据段的权限不同分为几大类：
(1)可读可执行的段，如代码段
(2)可读可写的段，如数据段，BSS段(用来存放程序中未初始化的全局变量和静态变量的一块区域)
(3)只读的段，如只读数据段
程序运行时，可执行文件的这些段分别被装载到进行的虚拟存储空间中，每个段没映射到进程虚存空间中一个相应的VMA（Virtual Memory Area）
典型的VMA：
(1)栈空间Stack VMA：可读写，不可执行，没有对应的映像文件
(2)堆空间Heap VMA：可读写，可执行，没有对应的映像文件
(3)数据空间Data VMA：可读写，可执行，有对应的映像文件
(4)代码空间Code VMA：只读，可执行，有对应的映像文件

程序的运行称为进程的创建与运行。一个进程的运行分3个步骤：
    1.创建该进程的虚拟存储空间
    2.读取可执行文件，该文件对应段映射到虚拟存储空间中
    3.将CPU的指令寄存器设置为可执行文件的入口地址

